// ================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// You can delete these comments if you wish manually maintain this interface file.
// ================================================================================

package weixin_service

import (
	"context"

	"github.com/gogf/gf/v2/frame/g"
	"github.com/kysion/base-library/base_hook"
	"github.com/kysion/weixin-library/weixin_model"
	hook "github.com/kysion/weixin-library/weixin_model/weixin_hook"
	"github.com/wechatpay-apiv3/wechatpay-go/services/certificates"
)

type (
	IWeiXinPay interface {
		PayTradeCreate(ctx context.Context, info *weixin_model.TradeOrder, openId string) (*weixin_model.PayParamsRes, error)
		DownloadCertificates(ctx context.Context) (*certificates.DownloadCertificatesResponse, error)
		JsapiCreateOrder(ctx context.Context, info *weixin_model.TradeOrder, openId string) (tradeNo string, err error)
		QueryOrderByIdMchID(ctx context.Context, transactionId string) (*weixin_model.TradeOrderRes, error)
		QueryOrderByIdOutTradeNo(ctx context.Context, outTradeNo string) (*weixin_model.TradeOrderRes, error)
		CloseOrder(ctx context.Context, outTradeNo string) (bool, error)
		DownloadAccountBill(ctx context.Context, mchId string)
	}
	IUserAuth interface {
		InstallConsumerHook(infoType hook.ConsumerKey, hookFunc hook.ConsumerHookFunc)
		GetHook() base_hook.BaseHook[hook.ConsumerKey, hook.ConsumerHookFunc]
		GetMiniAppUserInfo(ctx context.Context, authCode string, appId string, getDetail bool) (*weixin_model.UserInfoRes, error)
		UserAuthCallback(ctx context.Context, info g.Map) bool
		UserLogin(ctx context.Context, info g.Map) (string, error)
		GetTinyAppUserInfo(ctx context.Context, sessionKey, encryptedData, iv, appId string, openId string) (*weixin_model.UserInfoRes, error)
	}
	IAppAuth interface {
		RefreshToken(ctx context.Context, merchantAppId, thirdAppId, refreshToken string) (bool, error)
		AppAuth(ctx context.Context, info g.Map) bool
		Authorized(ctx context.Context, info g.Map) bool
		UpdateAuthorized(ctx context.Context, info g.Map) bool
		Unauthorized(ctx context.Context, info g.Map) bool
	}
	IWeiXinCert interface {
		WechatpayDownloadCerts(ctx context.Context)
	}
	IMerchantNotify interface {
		NotifyServices(ctx context.Context) (string, error)
	}
)

var (
	localWeiXinCert     IWeiXinCert
	localMerchantNotify IMerchantNotify
	localWeiXinPay      IWeiXinPay
	localUserAuth       IUserAuth
	localAppAuth        IAppAuth
)

func UserAuth() IUserAuth {
	if localUserAuth == nil {
		panic("implement not found for interface IUserAuth, forgot register?")
	}
	return localUserAuth
}

func RegisterUserAuth(i IUserAuth) {
	localUserAuth = i
}

func AppAuth() IAppAuth {
	if localAppAuth == nil {
		panic("implement not found for interface IAppAuth, forgot register?")
	}
	return localAppAuth
}

func RegisterAppAuth(i IAppAuth) {
	localAppAuth = i
}

func WeiXinCert() IWeiXinCert {
	if localWeiXinCert == nil {
		panic("implement not found for interface IWeiXinCert, forgot register?")
	}
	return localWeiXinCert
}

func RegisterWeiXinCert(i IWeiXinCert) {
	localWeiXinCert = i
}

func MerchantNotify() IMerchantNotify {
	if localMerchantNotify == nil {
		panic("implement not found for interface IMerchantNotify, forgot register?")
	}
	return localMerchantNotify
}

func RegisterMerchantNotify(i IMerchantNotify) {
	localMerchantNotify = i
}

func WeiXinPay() IWeiXinPay {
	if localWeiXinPay == nil {
		panic("implement not found for interface IWeiXinPay, forgot register?")
	}
	return localWeiXinPay
}

func RegisterWeiXinPay(i IWeiXinPay) {
	localWeiXinPay = i
}
