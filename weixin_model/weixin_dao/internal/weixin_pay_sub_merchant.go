// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// WeixinPaySubMerchantDao is the data access object for table weixin_pay_sub_merchant.
type WeixinPaySubMerchantDao struct {
	dao_interface.IDao
	table       string                      // table is the underlying table name of the DAO.
	group       string                      // group is the database configuration group name of current DAO.
	columns     WeixinPaySubMerchantColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// WeixinPaySubMerchantColumns defines and stores column names for table weixin_pay_sub_merchant.
type WeixinPaySubMerchantColumns struct {
	Id                   string // ID
	SubMchid             string // 特约商户商户号
	SpMchid              string // 服务商商户号
	SubAppid             string // 特约商户App唯一标识ID
	SubAppName           string // 特约商户App名称
	SubAppType           string // 特约商户App类型：1公众号 2小程序 4网站应用H5  8移动应用  16视频小店
	SubMerchantName      string // 特约商户公司名称
	SubMerchantShortName string // 特约商户商家简称
	SysUserId            string // 特约商户用户ID
	UnionMainId          string // 特约商户用户主体
	UnionMainType        string // 特约商户主体类型
	JsapiAuthPath        string // JSAPI支付授权目录
	H5AuthPath           string // H5支付授权目录
	UpdatedAt            string //
	MerchantType         string // 商户号类型：1服务商、2商户、4门店商家
	MerchantUnionType    string // 特约商户主体类型：1个体工商户、2企业、4事业单位、8社会组织、16政府机关
	BankcardAccount      string // 结算账号，添加特约商户的时候填写的结算银行账户
}

// weixinPaySubMerchantColumns holds the columns for table weixin_pay_sub_merchant.
var weixinPaySubMerchantColumns = WeixinPaySubMerchantColumns{
	Id:                   "id",
	SubMchid:             "sub_mchid",
	SpMchid:              "sp_mchid",
	SubAppid:             "sub_appid",
	SubAppName:           "sub_app_name",
	SubAppType:           "sub_app_type",
	SubMerchantName:      "sub_merchant_name",
	SubMerchantShortName: "sub_merchant_short_name",
	SysUserId:            "sys_user_id",
	UnionMainId:          "union_main_id",
	UnionMainType:        "union_main_type",
	JsapiAuthPath:        "jsapi_auth_path",
	H5AuthPath:           "h5_auth_path",
	UpdatedAt:            "updated_at",
	MerchantType:         "merchant_type",
	MerchantUnionType:    "merchant_union_type",
	BankcardAccount:      "bankcard_account",
}

// NewWeixinPaySubMerchantDao creates and returns a new DAO object for table data access.
func NewWeixinPaySubMerchantDao(proxy ...dao_interface.IDao) *WeixinPaySubMerchantDao {
	var dao *WeixinPaySubMerchantDao
	if len(proxy) > 0 {
		dao = &WeixinPaySubMerchantDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     weixinPaySubMerchantColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &WeixinPaySubMerchantDao{
		group:   "default",
		table:   "weixin_pay_sub_merchant",
		columns: weixinPaySubMerchantColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *WeixinPaySubMerchantDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *WeixinPaySubMerchantDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *WeixinPaySubMerchantDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *WeixinPaySubMerchantDao) Columns() WeixinPaySubMerchantColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *WeixinPaySubMerchantDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *WeixinPaySubMerchantDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *WeixinPaySubMerchantDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *WeixinPaySubMerchantDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *WeixinPaySubMerchantDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *WeixinPaySubMerchantDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *WeixinPaySubMerchantDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
