// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// WeixinConsumerConfigDao is the data access object for table weixin_consumer_config.
type WeixinConsumerConfigDao struct {
	table   string                      // table is the underlying table name of the DAO.
	group   string                      // group is the database configuration group name of current DAO.
	columns WeixinConsumerConfigColumns // columns contains all the column names of Table for convenient usage.
}

// WeixinConsumerConfigColumns defines and stores column names for table weixin_consumer_config.
type WeixinConsumerConfigColumns struct {
	Id                 string // id
	UserId             string // 用户账号id
	SysUserId          string // 用户id
	Avatar             string // 头像
	Province           string // 省份
	City               string // 城市
	NickName           string // 昵称
	IsStudentCertified string // 学生认证
	UserType           string // 用户账号类型
	UserState          string // 状态：0未激活、1正常、-1封号、-2异常、-3已注销
	IsCertified        string // 是否实名认证
	Sex                string // 性别：0女 1男
	AuthToken          string // 授权token
	ExtJson            string // 拓展字段
	CreatedAt          string //
	UpdatedAt          string //
	DeletedAt          string //
}

// weixinConsumerConfigColumns holds the columns for table weixin_consumer_config.
var weixinConsumerConfigColumns = WeixinConsumerConfigColumns{
	Id:                 "id",
	UserId:             "user_id",
	SysUserId:          "sys_user_id",
	Avatar:             "avatar",
	Province:           "province",
	City:               "city",
	NickName:           "nick_name",
	IsStudentCertified: "is_student_certified",
	UserType:           "user_type",
	UserState:          "user_state",
	IsCertified:        "is_certified",
	Sex:                "sex",
	AuthToken:          "auth_token",
	ExtJson:            "ext_json",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

// NewWeixinConsumerConfigDao creates and returns a new DAO object for table data access.
func NewWeixinConsumerConfigDao(proxy ...dao_interface.IDao) *WeixinConsumerConfigDao {
	var dao *WeixinConsumerConfigDao
	if proxy != nil {
		dao = &WeixinConsumerConfigDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: weixinConsumerConfigColumns,
		}
		return dao
	}

	return &WeixinConsumerConfigDao{
		group:   "default",
		table:   "weixin_consumer_config",
		columns: weixinConsumerConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *WeixinConsumerConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *WeixinConsumerConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *WeixinConsumerConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *WeixinConsumerConfigDao) Columns() WeixinConsumerConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *WeixinConsumerConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *WeixinConsumerConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *WeixinConsumerConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
