// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// WeixinThirdAppConfigDao is the data access object for table weixin_third_app_config.
type WeixinThirdAppConfigDao struct {
	table   string                      // table is the underlying table name of the DAO.
	group   string                      // group is the database configuration group name of current DAO.
	columns WeixinThirdAppConfigColumns // columns contains all the column names of Table for convenient usage.
}

// WeixinThirdAppConfigColumns defines and stores column names for table weixin_third_app_config.
type WeixinThirdAppConfigColumns struct {
	Id             string // 服务商id
	Name           string // 服务商name
	AppId          string // 服务商应用Id
	AppName        string // 服务商应用名称
	AppType        string // 服务商应用类型
	AppAuthToken   string // 服务商应用授权token
	ExpiresIn      string // Token过期时间
	ReExpiresIn    string // Token限期刷新时间
	UnionMainId    string // 关联主体id
	SysUserId      string // 用户id
	ExtJson        string // 拓展字段
	AppGatewayUrl  string // 网关地址
	AppCallbackUrl string // 回调地址
	AppSecret      string // 服务商应用密钥
	MsgVerfiyToken string // 消息校验Token
	MsgEncryptKey  string // 消息加密解密密钥
	AuthInitUrl    string // 授权发起页域名
	ServerDomain   string // 服务器域名
	BusinessDomain string // 业务域名
	AuthTestAppIds string // 授权测试应用列表
	PlatformSite   string // 平台官方
	Logo           string // 服务商logo
	State          string // 状态：0禁用 1启用
	ReleaseState   string // 发布状态：0未发布 1已发布
	HttpsCert      string // 域名证书
	HttpsKey       string // 域名私钥
	UpdatedAt      string //
	AppIdMd5       string // 应用id加密md5后的结果
	UserId         string // 应用所属账号
	RefreshToken   string // 刷新应用Token
}

// weixinThirdAppConfigColumns holds the columns for table weixin_third_app_config.
var weixinThirdAppConfigColumns = WeixinThirdAppConfigColumns{
	Id:             "id",
	Name:           "name",
	AppId:          "app_id",
	AppName:        "app_name",
	AppType:        "app_type",
	AppAuthToken:   "app_auth_token",
	ExpiresIn:      "expires_in",
	ReExpiresIn:    "re_expires_in",
	UnionMainId:    "union_main_id",
	SysUserId:      "sys_user_id",
	ExtJson:        "ext_json",
	AppGatewayUrl:  "app_gateway_url",
	AppCallbackUrl: "app_callback_url",
	AppSecret:      "app_secret",
	MsgVerfiyToken: "msg_verfiy_token",
	MsgEncryptKey:  "msg_encrypt_key",
	AuthInitUrl:    "auth_init_url",
	ServerDomain:   "server_domain",
	BusinessDomain: "business_domain",
	AuthTestAppIds: "auth_test_appIds",
	PlatformSite:   "platform_site",
	Logo:           "logo",
	State:          "state",
	ReleaseState:   "release_state",
	HttpsCert:      "https_cert",
	HttpsKey:       "https_key",
	UpdatedAt:      "updated_at",
	AppIdMd5:       "app_id_md5",
	UserId:         "user_id",
	RefreshToken:   "refresh_token",
}

// NewWeixinThirdAppConfigDao creates and returns a new DAO object for table data access.
func NewWeixinThirdAppConfigDao(proxy ...dao_interface.IDao) *WeixinThirdAppConfigDao {
	var dao *WeixinThirdAppConfigDao
	if proxy != nil {
		dao = &WeixinThirdAppConfigDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: weixinThirdAppConfigColumns,
		}
		return dao
	}

	return &WeixinThirdAppConfigDao{
		group:   "default",
		table:   "weixin_third_app_config",
		columns: weixinThirdAppConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *WeixinThirdAppConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *WeixinThirdAppConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *WeixinThirdAppConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *WeixinThirdAppConfigDao) Columns() WeixinThirdAppConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *WeixinThirdAppConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *WeixinThirdAppConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *WeixinThirdAppConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
