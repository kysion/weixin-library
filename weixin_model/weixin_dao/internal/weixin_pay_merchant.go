// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// WeixinPayMerchantDao is the data access object for table weixin_pay_merchant.
type WeixinPayMerchantDao struct {
	dao_interface.IDao
	table       string                   // table is the underlying table name of the DAO.
	group       string                   // group is the database configuration group name of current DAO.
	columns     WeixinPayMerchantColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// WeixinPayMerchantColumns defines and stores column names for table weixin_pay_merchant.
type WeixinPayMerchantColumns struct {
	Id                string // ID
	Mchid             string // 微信支付商户号
	MerchantName      string // 商户号公司名称
	MerchantShortName string // 商户号简称
	MerchantType      string // 商户号类型：1服务商、2商户、4门店商家
	ApiV3Key          string // 用于ApiV3平台证书解密、回调信息解密
	ApiV2Key          string // 用于ApiV2平台证书解密、回调信息解密
	PayCertP12        string // 支付证书文件
	PayPublicKeyPem   string // 公钥文件
	PayPrivateKeyPem  string // 私钥文件
	CertSerialNumber  string // 证书序列号
	JsapiAuthPath     string // JSAPI支付授权目录
	SysUserId         string // 用户ID
	UnionMainId       string // 用户关联主体
	UnionMainType     string // 用户类型
	BankcardAccount   string // 银行结算账户,用于交易和提现
	UnionAppid        string // 该商户号关联的AppId，微信支付接入模式属于直连模式，限制只能是同一主体下的App列表
	UpdatedAt         string //
	AppId             string // 商户号 对应的公众号的服务号APPID
}

// weixinPayMerchantColumns holds the columns for table weixin_pay_merchant.
var weixinPayMerchantColumns = WeixinPayMerchantColumns{
	Id:                "id",
	Mchid:             "mchid",
	MerchantName:      "merchant_name",
	MerchantShortName: "merchant_short_name",
	MerchantType:      "merchant_type",
	ApiV3Key:          "api_v3_key",
	ApiV2Key:          "api_v2_key",
	PayCertP12:        "pay_cert_p12",
	PayPublicKeyPem:   "pay_public_key_pem",
	PayPrivateKeyPem:  "pay_private_key_pem",
	CertSerialNumber:  "cert_serial_number",
	JsapiAuthPath:     "jsapi_auth_path",
	SysUserId:         "sys_user_id",
	UnionMainId:       "union_main_id",
	UnionMainType:     "union_main_type",
	BankcardAccount:   "bankcard_account",
	UnionAppid:        "union_appid",
	UpdatedAt:         "updated_at",
	AppId:             "app_id",
}

// NewWeixinPayMerchantDao creates and returns a new DAO object for table data access.
func NewWeixinPayMerchantDao(proxy ...dao_interface.IDao) *WeixinPayMerchantDao {
	var dao *WeixinPayMerchantDao
	if len(proxy) > 0 {
		dao = &WeixinPayMerchantDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     weixinPayMerchantColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &WeixinPayMerchantDao{
		group:   "default",
		table:   "weixin_pay_merchant",
		columns: weixinPayMerchantColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *WeixinPayMerchantDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *WeixinPayMerchantDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *WeixinPayMerchantDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *WeixinPayMerchantDao) Columns() WeixinPayMerchantColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *WeixinPayMerchantDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *WeixinPayMerchantDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *WeixinPayMerchantDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *WeixinPayMerchantDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *WeixinPayMerchantDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *WeixinPayMerchantDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *WeixinPayMerchantDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
