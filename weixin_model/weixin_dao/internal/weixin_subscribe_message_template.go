// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// WeixinSubscribeMessageTemplateDao is the data access object for table weixin_subscribe_message_template.
type WeixinSubscribeMessageTemplateDao struct {
	dao_interface.IDao
	table       string                                // table is the underlying table name of the DAO.
	group       string                                // group is the database configuration group name of current DAO.
	columns     WeixinSubscribeMessageTemplateColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// WeixinSubscribeMessageTemplateColumns defines and stores column names for table weixin_subscribe_message_template.
type WeixinSubscribeMessageTemplateColumns struct {
	Id                       string // ID
	TemplateId               string // 模板ID
	Type                     string // 模板类型：2一次性订阅、3长期订阅
	Title                    string // 模板标题
	KeyWords                 string // 模板主题词/关键词
	ServerCategory           string // 模板服务类目
	ServerCategoryId         string // 模板服务类目ID
	Content                  string // 模板内容
	ContentExample           string // 模板内容示例
	ContentDataJson          string // 模板内容Json
	KeyWordEnumValueListJson string // 模板枚举参数值范围列表
	SceneDesc                string // 场景描述
	SceneType                string // 场景类型【业务层自定义】：1活动即将开始提醒、2活动开始提醒、3活动即将结束提醒、4活动结束提醒、5活动获奖提醒、6券即将生效提醒、7券的生效提醒、8券的失效提醒、9券即将失效提醒、10券核销提醒、8192系统通知、
	MessageType              string // 消息类型【业务层自定义】：1系统消息、2活动消息、4免啦券消息
	MerchantAppId            string // 商家应用APPID
	MerchantAppType          string // 商家应用类型：1公众号、2小程序、4网站应用H5、8移动应用、16视频小店
	ThirdAppId               string // 第三方平台应用APPID
	UserId                   string // 应用所属账号
	UnionMainId              string // 关联主体id
	ExtJson                  string // 拓展字段Json
	CreatedAt                string //
	UpdatedAt                string //
}

// weixinSubscribeMessageTemplateColumns holds the columns for table weixin_subscribe_message_template.
var weixinSubscribeMessageTemplateColumns = WeixinSubscribeMessageTemplateColumns{
	Id:                       "id",
	TemplateId:               "template_id",
	Type:                     "type",
	Title:                    "title",
	KeyWords:                 "key_words",
	ServerCategory:           "server_category",
	ServerCategoryId:         "server_category_id",
	Content:                  "content",
	ContentExample:           "content_example",
	ContentDataJson:          "content_data_json",
	KeyWordEnumValueListJson: "key_word_enum_value_list_json",
	SceneDesc:                "scene_desc",
	SceneType:                "scene_type",
	MessageType:              "message_type",
	MerchantAppId:            "merchant_app_id",
	MerchantAppType:          "merchant_app_type",
	ThirdAppId:               "third_app_id",
	UserId:                   "user_id",
	UnionMainId:              "union_main_id",
	ExtJson:                  "ext_json",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
}

// NewWeixinSubscribeMessageTemplateDao creates and returns a new DAO object for table data access.
func NewWeixinSubscribeMessageTemplateDao(proxy ...dao_interface.IDao) *WeixinSubscribeMessageTemplateDao {
	var dao *WeixinSubscribeMessageTemplateDao
	if len(proxy) > 0 {
		dao = &WeixinSubscribeMessageTemplateDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     weixinSubscribeMessageTemplateColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &WeixinSubscribeMessageTemplateDao{
		group:   "default",
		table:   "weixin_subscribe_message_template",
		columns: weixinSubscribeMessageTemplateColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *WeixinSubscribeMessageTemplateDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *WeixinSubscribeMessageTemplateDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *WeixinSubscribeMessageTemplateDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *WeixinSubscribeMessageTemplateDao) Columns() WeixinSubscribeMessageTemplateColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *WeixinSubscribeMessageTemplateDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *WeixinSubscribeMessageTemplateDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *WeixinSubscribeMessageTemplateDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *WeixinSubscribeMessageTemplateDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *WeixinSubscribeMessageTemplateDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *WeixinSubscribeMessageTemplateDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *WeixinSubscribeMessageTemplateDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
